import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np

# Analysics
training_data = pd.read_csv('train.csv')
testing_data = pd.read_csv('test.csv')

# AnyNan values in the target column or in my dataset
Null_in_training_data = [training_data[col].isnull().sum() for col in training_data.columns]
training_data.dropna(inplace=True, axis=0)
testing_data.dropna(inplace=True, axis=0)
print("This is the Nulls", Null_in_training_data)
Null_in_training_data = [training_data[col].isnull().sum() for col in training_data.columns]
print("This is the Nulls", Null_in_training_data) # it worked i could cry

print(training_data.shape)
print(testing_data.shape)


# Categorical data to perform one hot encoding

Unique_val = [training_data[col].nunique() for col in training_data.columns]
print(Unique_val)
print(training_data.head())
print(testing_data.columns)

# Perform one hot encoding on HomePlanet, 

features = ['HomePlanet', 'Destination', 'CryoSleep', 'VIP' ]
X= pd.get_dummies(training_data[features]).astype(int)
X = X.values.reshape((X.shape[0], -1))

# To fix the shaping problem, I am trying to reshape my data
y = training_data['Transported'].astype(int)
y = y.values.reshape((y.shape[0], -1))
x_test = pd.get_dummies(testing_data[features]).astype(int)
x_test = x_test.values.reshape((x_test.shape[0], -1))



# Creating my model

X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.6, test_size=0.4, random_state=42)
rt_model = RandomForestRegressor()
rt_model.fit(X_train,y_train)
predictions = rt_model.predict(X_test)


#Debugging inconsistent shape error

print(len(X), len(y))  # Check the lengths of X and y before train-test split
print(len(X_train), len(y_train))  # Check the lengths of X_train and y_train after train-test split
print(len(X_test), len(y_test))  # Check the lengths of X_test and y_test after train-test split

#Debugging inconsistent shaping error
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)

#save the csv

output = pd.DataFrame({'PassengerId': testing_data.PassengerId, 'Transported': predictions})
output.to_csv('submission.csv', index=False)
print("Your submission was successfully saved!")

Here is my old code and the mistakes I made were:
Because my test and train data are in different files I don't need to split them.
Having x_test and X_test being so similar can cause problems as Python is case-sensitive.

I was very worried went I was having these issues as my code should work but now I understand. 
